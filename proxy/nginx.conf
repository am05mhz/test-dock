events { 
    worker_connections 2048; 
}

http {
    client_max_body_size 1024M;

    # ComfyUI : 3000
    server {
        listen 3001;

        location /ws {
            add_header Cache-Control no-cache;
            proxy_set_header Accept-Encoding gzip;

            include snippets/nginx-proxy.conf;
            proxy_pass http://localhost:3000;
        }

        location /queue/join {
            add_header Cache-Control no-cache;
            proxy_set_header Accept-Encoding gzip;

            include snippets/nginx-proxy.conf;
            proxy_pass http://localhost:3000;
        }

        location / {
            add_header Cache-Control no-cache;
            proxy_set_header Accept-Encoding gzip;

            include snippets/nginx-proxy.conf;
            proxy_pass http://localhost:3000;
        }
    }

    # code-server : 8080
    server {
        listen 8081;

        location / {
            add_header Cache-Control no-cache;
            include snippets/nginx-proxy.conf;
            proxy_pass http://localhost:8080;
        }

        include snippets/nginx-error-handling.conf;
    }

    # JupyterLab : 8888
    # server {
    #     listen 8889;

    #     location /ws {
    #         add_header Cache-Control no-cache;
    #         proxy_set_header Accept-Encoding gzip;

    #         include snippets/nginx-proxy.conf;
    #         proxy_pass http://localhost:8888;
    #     }

    #     location / {
    #         add_header Cache-Control no-cache;
    #         proxy_set_header Accept-Encoding gzip;

    #         include snippets/nginx-proxy.conf;
    #         proxy_pass http://localhost:8888;
    #     }
    # }

    # App : 5000
    server {
        listen 5001;

        location / {
            add_header Cache-Control no-cache;
            include snippets/nginx-proxy.conf;
            proxy_pass http://localhost:5000;
        }

        include snippets/nginx-error-handling.conf;
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ""      close;
    }

    map $remote_addr $proxy_forwarded_elem {
        # IPv4 addresses can be sent as-is
        ~^[0-9.]+$        "for=$remote_addr";

        # IPv6 addresses need to be bracketed and quoted
        ~^[0-9A-Fa-f:.]+$ "for=\"[$remote_addr]\"";

        # Unix domain socket names cannot be represented in RFC 7239 syntax
        default           "for=unknown";
    }

    map $http_forwarded $proxy_add_forwarded {
        # If the incoming Forwarded header is syntactically valid, append to it
        "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";

        # Otherwise, replace it
        default "$proxy_forwarded_elem";
    }
}
